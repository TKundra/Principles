** ----------------------------- Structural Design Patterns
Structural design patterns are concerned with how classes and objects can be composed, to form larger structures. The structural design
patterns simplifies the structure by identifying the relationships. These patterns focus on how the classes inherit from each other and
how they are composed from other classes.

1. ---------------------------------------------------------- Adapter Pattern
Problem:
Imagine that you’re creating a stock market monitoring app. The app downloads the stock data from multiple sources in XML format and then 
displays nice-looking charts and diagrams for the user.
At some point, you decide to improve the app by integrating a smart 3rd-party analytics library. But there’s a catch: the analytics library 
only works with data in JSON format.
You could change the library to work with XML. However, this might break some existing code that relies on the library. And worse, you might
not have access to the library’s source code in the first place, making this approach impossible.

Solution:
You can create an adapter. This is a special object that converts the interface of one object so that another object can understand it.
An adapter wraps one of the objects to hide the complexity of conversion happening behind the scenes. The wrapped object isn’t even aware of 
the adapter. For example, you can wrap an object that operates in meters and kilometers with an adapter that converts all of the data to 
imperial units such as feet and miles.
Adapters can not only convert data into various formats but can also help objects with different interfaces collaborate. Here’s how it works:
Let’s get back to our stock market app. To solve the dilemma of incompatible formats, you can create XML-to-JSON adapters for every class of 
the analytics library that your code works with directly. Then you adjust your code to communicate with the library only via these adapters. 
When an adapter receives a call, it translates the incoming XML data into a JSON structure and passes the call to the appropriate methods of a 
wrapped analytics object.

The adapter gets an interface, compatible with one of the existing objects.
Using this interface, the existing object can safely call the adapter’s methods.
Upon receiving a call, the adapter passes the request to the second object, but in a format and order that the second object expects.
Sometimes it’s even possible to create a two-way adapter that can convert the calls in both directions.

Adapter pattern works as a bridge between two incompatible interfaces. This type of design pattern comes under structural pattern as this
pattern combines the capability of two independent interfaces. This pattern involves a single class which is responsible for joining
functionalities of independent or incompatible interfaces. A real life example could be a case of a card reader which acts as an adapter
between a memory card and a laptop. You plug the memory card into the card reader and card reader into the laptop so that the memory card
can be read via laptop. We are demonstrating use of Adapter pattern via the following example in which an audio player device can play mp3
files only and wants to use an advanced audio player capable of playing vlc and mp4 files.

Applicability:
* Use the Adapter class when you want to use some existing class, but its interface isn’t compatible with the rest of your code.
* Use the pattern when you want to reuse several existing subclasses that lack some common functionality that can’t be added to the superclass.

Pros:
* Single Responsibility Principle. You can separate the interface or data conversion code from the primary business logic of the program.
* Open/Closed Principle. You can introduce new types of adapters into the program without breaking the existing client code, as long as they work 
with the adapters through the client interface.

Cons:
* The overall complexity of the code increases because you need to introduce a set of new interfaces and classes. Sometimes it’s simpler just to 
change the service class so that it matches the rest of your code.

Usage:
We have an ImageViewer interface and a concrete class named GalleryApp which is implementing the ImageViewer interface. GalleryApp can show
jpeg files by default. Let us say we have another interface named AdvancedImageViewer and concrete classes implementing this interface.
These classes can show png and jpg files by default. Now we want our GalleryApp class to be able to show png and jpg files without changing
the source code of the ImageViewer interface. So here we will use an adapter design pattern to solve this problem.

2. ---------------------------------------------------------- Composite Pattern
Problem:
Using the Composite pattern makes sense only when the core model of your app can be represented as a tree.
For example, imagine that you have two types of objects: Products and Boxes. A Box can contain several Products as well as a number of smaller Boxes.
These little Boxes can also hold some Products or even smaller Boxes, and so on.
Say you decide to create an ordering system that uses these classes. Orders could contain simple products without any wrapping, as well as boxes 
stuffed with products...and other boxes. How would you determine the total price of such an order?
You could try the direct approach: unwrap all the boxes, go over all the products and then calculate the total. That would be doable in the real world;
but in a program, it’s not as simple as running a loop. You have to know the classes of Products and Boxes you’re going through, the nesting level of 
the boxes and other nasty details beforehand. All of this makes the direct approach either too awkward or even impossible.

Solution:
The Composite pattern suggests that you work with Products and Boxes through a common interface which declares a method for calculating the total price.
How would this method work? For a product, it’d simply return the product’s price. For a box, it’d go over each item the box contains, ask its price and 
then return a total for this box. If one of these items were a smaller box, that box would also start going over its contents and so on, until the prices 
of all inner components were calculated. A box could even add some extra cost to the final price, such as packaging cost.
The greatest benefit of this approach is that you don’t need to care about the concrete classes of objects that compose the tree. You don’t need to know 
whether an object is a simple product or a sophisticated box. You can treat them all the same via the common interface. When you call a method, the objects 
themselves pass the request down the tree.

This pattern creates a class that contains a group of its own objects. This class provides ways to modify its group of the same objects. We 
are demonstrating the use of a composite pattern via the following example in which we will show the employees hierarchy of an organization.

Applicability:
* Use the Composite pattern when you have to implement a tree-like object structure.
* Use the pattern when you want the client code to treat both simple and complex elements uniformly.

Pros:
* You can work with complex tree structures more conveniently: use polymorphism and recursion to your advantage.
* Open/Closed Principle. You can introduce new element types into the app without breaking the existing code, which now works with the object tree.

Cons:
* It might be difficult to provide a common interface for classes whose functionality differs too much. In certain scenarios, you’d need to overgeneralize 
the component interface, making it harder to comprehend.

Usage:
Let us try to take out the printing logic from our core classes and delegate it to some other class, as the printing logic is something that 
is susceptible to change. We have the following requirements from our application:
Operations like print() can be applied on the whole hierarchy (the whole Universe) or on a part (a constellation or a star).
Our client class should not worry if it is operating on a parent node or a child node in our hierarchy tree.

3. ---------------------------------------------------------- Decorator Pattern
Problem:
Imagine that you’re working on a notification library which lets other programs notify their users about important events.
The initial version of the library was based on the Notifier class that had only a few fields, a constructor and a single send method. The method could accept a 
message argument from a client and send the message to a list of emails that were passed to the notifier via its constructor. A third-party app which acted as a 
client was supposed to create and configure the notifier object once, and then use it each time something important happened.
At some point, you realize that users of the library expect more than just email notifications. Many of them would like to receive an SMS about critical issues. 
Others would like to be notified on Facebook and, of course, the corporate users would love to get Slack notifications.
How hard can that be? You extended the Notifier class and put the additional notification methods into new subclasses. Now the client was supposed to instantiate 
the desired notification class and use it for all further notifications.
But then someone reasonably asked you, “Why can’t you use several notification types at once? If your house is on fire, you’d probably want to be informed through 
every channel.”
You tried to address that problem by creating special subclasses which combined several notification methods within one class. However, it quickly became apparent 
that this approach would bloat the code immensely, not only the library code but the client code as well.
You have to find some other way to structure notifications classes so that their number won’t accidentally break some Guinness record.

Solution:
Extending a class is the first thing that comes to mind when you need to alter an object’s behavior. However, inheritance has several serious caveats that you need 
to be aware of.
    * Inheritance is static. You can’t alter the behavior of an existing object at runtime. You can only replace the whole object with another one that’s created 
    from a different subclass.
    * Subclasses can have just one parent class. In most languages, inheritance doesn’t let a class inherit behaviors of multiple classes at the same time.
One of the ways to overcome these caveats is by using Aggregation or Composition  instead of Inheritance. Both of the alternatives work almost the same way: one 
object has a reference to another and delegates it some work, whereas with inheritance, the object itself is able to do that work, inheriting the behavior from its
superclass.
With this new approach you can easily substitute the linked “helper” object with another, changing the behavior of the container at runtime. An object can use the 
behavior of various classes, having references to multiple objects and delegating them all kinds of work. Aggregation/composition is the key principle behind many 
design patterns, including Decorator. On that note, let’s return to the pattern discussion.

“Wrapper” is the alternative nickname for the Decorator pattern that clearly expresses the main idea of the pattern. A wrapper is an object that can be linked with 
some target object. The wrapper contains the same set of methods as the target and delegates to it all requests it receives. However, the wrapper may alter the result 
by doing something either before or after it passes the request to the target.
When does a simple wrapper become the real decorator? As I mentioned, the wrapper implements the same interface as the wrapped object. That’s why from the client’s 
perspective these objects are identical. Make the wrapper’s reference field accept any object that follows that interface. This will let you cover an object in multiple 
wrappers, adding the combined behavior of all the wrappers to it.
In our notifications example, let’s leave the simple email notification behavior inside the base Notifier class, but turn all other notification methods into decorators.
The client code would need to wrap a basic notifier object into a set of decorators that match the client’s preferences. The resulting objects will be structured as a stack.

The last decorator in the stack would be the object that the client actually works with. Since all decorators implement the same interface as the base notifier, the rest of 
the client code won’t care whether it works with the “pure” notifier object or the decorated one.
We could apply the same approach to other behaviors such as formatting messages or composing the recipient list. The client can decorate the object with any custom decorators, 
as long as they follow the same interface as the others.

This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature 
intact. We are demonstrating the use of decorator pattern via the following example in which we will decorate a shape with some color without 
an alter shape class.

Applicability:
* Use the Decorator pattern when you need to be able to assign extra behaviors to objects at runtime without breaking the code that uses these objects.
* Use the pattern when it’s awkward or not possible to extend an object’s behavior using inheritance.

Pros:
* You can extend an object’s behavior without making a new subclass.
* You can add or remove responsibilities from an object at runtime.
* You can combine several behaviors by wrapping an object into multiple decorators.
* Single Responsibility Principle. You can divide a monolithic class that implements many possible variants of behavior into several smaller classes.

Cons:
* It’s hard to remove a specific wrapper from the wrappers stack.
* It’s hard to implement a decorator in such a way that its behavior doesn’t depend on the order in the decorators stack.
* The initial configuration code of layers might look pretty ugly.

Usage:
In object-oriented programming, the decorator pattern is a structural design pattern that allows behavior and functionality to be dynamically 
added to an object without affecting the behavior of other objects in the same class. Because it offers a wrapper to an existing class, the 
decorator design pattern is also known as Wrapper. To implement the wrapper, this approach uses abstract classes or interfaces with composition.
Decorator classes are used to extend the functionality of the base class.

4. ---------------------------------------------------------- Proxy Pattern
Problem:
Why would you want to control access to an object? Here is an example: you have a massive object that consumes a vast amount of system resources. 
You need it from time to time, but not always.
You could implement lazy initialization: create this object only when it’s actually needed. All of the object’s clients would need to execute some deferred initialization code.
Unfortunately, this would probably cause a lot of code duplication.
In an ideal world, we’d want to put this code directly into our object’s class, but that isn’t always possible. For instance, the class may be part of a closed 3rd-party library.

Solution:
The Proxy pattern suggests that you create a new proxy class with the same interface as an original service object. Then you update your app so that it passes the proxy object to 
all of the original object’s clients. Upon receiving a request from a client, the proxy creates a real service object and delegates all the work to it.
But what’s the benefit? If you need to execute something either before or after the primary logic of the class, the proxy lets you do this without changing that class. Since the 
proxy implements the same interface as the original class, it can be passed to any client that expects a real service object.

Proxy Design Pattern is a type of structural design pattern which is used whenever we need a placeholder or representational object that can work 
in place of the real object. The proxy acts as an intermediary layer between the client and the real object and hence can control the access to 
the real object, add additional functionality, and even restrict client access. It is also known as Surrogate Pattern.

Applicability:
* Lazy initialization (virtual proxy). This is when you have a heavyweight service object that wastes system resources by being always up, even though you only need it from time to time.
* Access control (protection proxy). This is when you want only specific clients to be able to use the service object; for instance, when your objects are crucial parts of an operating 
system and clients are various launched applications (including malicious ones).
* Local execution of a remote service (remote proxy). This is when the service object is located on a remote server.
* Logging requests (logging proxy). This is when you want to keep a history of requests to the service object.
* Caching request results (caching proxy). This is when you need to cache results of client requests and manage the life cycle of this cache, especially if results are quite large.
* Smart reference. This is when you need to be able to dismiss a heavyweight object once there are no clients that use it.

Pros:
* You can control the service object without clients knowing about it.
* You can manage the lifecycle of the service object when clients don’t care about it.
* The proxy works even if the service object isn’t ready or is not available.
* Open/Closed Principle. You can introduce new proxies without changing the service or clients.

Cons:
* The code may become more complicated since you need to introduce a lot of new classes.
* The response from the service might get delayed.

Usage:
While dealing with software applications in our day-to-day life, it is not always possible to load or display heavy images and video files especially 
while dealing with limited resource devices or low bandwidth internet connectivity. To ensure uninterrupted service in these cases, software developers
make use of the Proxy Design Pattern. Let us try to understand how all of this is done through an example.
Let's say we have been asked to design an Instagram-like application that loads and displays images on a limited-resource smartphone device. Considering
the functionality i.e To load and display the image, we decided to create an Image interface that defines some general operations we need to perform
such as determining whether the Image should have borders or not, rendering and displaying the image on the screen, etc.

5. ---------------------------------------------------------- Facade Pattern
Solution:
Imagine that you must make your code work with a broad set of objects that belong to a sophisticated library or framework. Ordinarily, you’d need to initialize all of those objects, 
keep track of dependencies, execute methods in the correct order, and so on.
As a result, the business logic of your classes would become tightly coupled to the implementation details of 3rd-party classes, making it hard to comprehend and maintain.

Solution:
A facade is a class that provides a simple interface to a complex subsystem which contains lots of moving parts. A facade might provide limited functionality in comparison to working 
with the subsystem directly. However, it includes only those features that clients really care about.
Having a facade is handy when you need to integrate your app with a sophisticated library that has dozens of features, but you just need a tiny bit of its functionality.
For instance, an app that uploads short funny videos with cats to social media could potentially use a professional video conversion library. However, all that it really needs is a 
class with the single method encode(filename, format). After creating such a class and connecting it with the video conversion library, you’ll have your first facade.

Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. This type of 
design pattern comes under structural pattern as this pattern adds an interface to existing systems to hide its complexities. This pattern involves a 
single class which provides simplified methods required by the client and delegates calls to methods of existing system classes.

Applicability:
* Use the Facade pattern when you need to have a limited but straightforward interface to a complex subsystem.
* Use the Facade when you want to structure a subsystem into layers.

Pros:
* You can isolate your code from the complexity of a subsystem.

Cons:
* A facade can become a god object coupled to all classes of an app.

Usage:
Let us think of a situation where we want our code to work with a broad set of objects which belong to a framework or a library. In a normal situation, 
we will need to initialize all the objects and execute all the methods in the correct order by keeping track of dependencies.
Consider the startup of a computer, when a computer system starts up it involves work of memory, CPU, hard drive, etc. These are complex processes that 
need to be handled. So, to overcome this problem we have introduced the Facade design patterns. Where we wrap the complexity of the task and provide one 
simple interface instead. But, you might be thinking, how does Facade solve these problems? Let us take a real-world example to understand this.

When we call a shop to place an order, the operator attending the call is our facade to all the services the shop can provide, so in simple terms, in 
facade design patterns we provide a simple interface before a complex system and based on the input in the facade layer the job is assigned to the 
respective subsystem.

6. ---------------------------------------------------------- Flyweight Pattern
Problem:
To have some fun after long working hours, you decided to create a simple video game: players would be moving around a map and shooting each other. You chose to implement 
a realistic particle system and make it a distinctive feature of the game. Vast quantities of bullets, missiles, and shrapnel from explosions should fly all over the map 
and deliver a thrilling experience to the player.
Upon its completion, you pushed the last commit, built the game and sent it to your friend for a test drive. Although the game was running flawlessly on your machine, your 
friend wasn’t able to play for long. On his computer, the game kept crashing after a few minutes of gameplay. After spending several hours digging through debug logs, you 
discovered that the game crashed because of an insufficient amount of RAM. It turned out that your friend’s rig was much less powerful than your own computer, and that’s why 
the problem emerged so quickly on his machine.
The actual problem was related to your particle system. Each particle, such as a bullet, a missile or a piece of shrapnel was represented by a separate object containing 
plenty of data. At some point, when the carnage on a player’s screen reached its climax, newly created particles no longer fit into the remaining RAM, so the program crashed.

Solution:
On closer inspection of the Particle class, you may notice that the color and sprite fields consume a lot more memory than other fields. What’s worse is that these two fields 
store almost identical data across all particles. For example, all bullets have the same color and sprite.
Other parts of a particle’s state, such as coordinates, movement vector and speed, are unique to each particle. After all, the values of these fields change over time. This 
data represents the always changing context in which the particle exists, while the color and sprite remain constant for each particle.
This constant data of an object is usually called the intrinsic state. It lives within the object; other objects can only read it, not change it. The rest of the object’s 
state, often altered “from the outside” by other objects, is called the extrinsic state.
The Flyweight pattern suggests that you stop storing the extrinsic state inside the object. Instead, you should pass this state to specific methods which rely on it. Only the 
intrinsic state stays within the object, letting you reuse it in different contexts. As a result, you’d need fewer of these objects since they only differ in the intrinsic 
state, which has much fewer variations than the extrinsic.
Let’s return to our game. Assuming that we had extracted the extrinsic state from our particle class, only three different objects would suffice to represent all particles in 
the game: a bullet, a missile, and a piece of shrapnel. As you’ve probably guessed by now, an object that only stores the intrinsic state is called a flyweight.

Flyweight pattern tries to reuse already existing similar kinds of objects by storing them and creates new objects when no matching object is found. We 
will demonstrate this pattern by drawing 20 circles of different locations but we will create only 5 objects. Only 5 colors are available so color 
property is used to check already existing Circle objects.

Applicability:
* Use the Flyweight pattern only when your program must support a huge number of objects which barely fit into available RAM.

Pros:
* You can save lots of RAM, assuming your program has tons of similar objects.

Cons:
* You might be trading RAM over CPU cycles when some of the context data needs to be recalculated each time somebody calls a flyweight method.
* The code becomes much more complicated. New team members will always be wondering why the state of an entity was separated in such a way.

Usage:
Consider we are creating an open-world game where we need to place a lot of trees for decorative purposes.
The trees are either in green or brown color with a height of 6ft. A Tree object has the below three attributes.
    * color - The color of the tree. Either green or brown.
    * height - The height of the tree is always 6ft.
    * position - The coordinate (x,y) of the tree in the game plane.

Let's say we want to place 10,000 trees (green - 5000 and brown - 5000) in the game and find the total memory required to store those Tree objects in 
the memory. We need a total of 17 bytes to store a Tree object in memory. So we need 170,000 bytes (170 KB) to store 10,000 Tree objects in the memory.
But if we look closely, we are storing the same colors and height in all the objects; we are wasting a total of 90 KB (color - 50 KB and height - 40 KB)
to store duplicate values. The only data varies across the Tree objects in position.

The flyweight design patterns help to eliminate this unwanted space by storing the shared states (color and height) within the Tree object and the 
unshared states (position) outside the Tree object. The Tree object is called the Flyweight object.

7. ---------------------------------------------------------- Bridge Pattern
Problem:
Say you have a geometric Shape class with a pair of subclasses: Circle and Square. You want to extend this class hierarchy to incorporate colors, so you plan 
to create Red and Blue shape subclasses. However, since you already have two subclasses, you’ll need to create four class combinations such as BlueCircle and 
RedSquare.
Adding new shape types and colors to the hierarchy will grow it exponentially. For example, to add a triangle shape you’d need to introduce two subclasses, 
one for each color. And after that, adding a new color would require creating three subclasses, one for each shape type. The further we go, the worse it becomes.

Solution:
This problem occurs because we’re trying to extend the shape classes in two independent dimensions: by form and by color. That’s a very common issue with class 
inheritance.
The Bridge pattern attempts to solve this problem by switching from inheritance to the object composition. What this means is that you extract one of the dimensions 
into a separate class hierarchy, so that the original classes will reference an object of the new hierarchy, instead of having all of its state and behaviors within 
one class.
Following this approach, we can extract the color-related code into its own class with two subclasses: Red and Blue. The Shape class then gets a reference field 
pointing to one of the color objects. Now the shape can delegate any color-related work to the linked color object. That reference will act as a bridge between the 
Shape and Color classes. From now on, adding new colors won’t require changing the shape hierarchy, and vice versa.

This pattern involves an interface which acts as a bridge which makes the functionality of concrete classes independent from interface implementer classes.
Both types of classes can be altered structurally without affecting each other. We are demonstrating use of Bridge pattern via the following example in 
which a circle can be drawn in different colors using the same abstract class method but different bridge implementer classes.

Applicability:
* Use the Bridge pattern when you want to divide and organize a monolithic class that has several variants of some functionality (for example, if the class can work 
with various database servers).
* Use the pattern when you need to extend a class in several orthogonal (independent) dimensions.
* Use the Bridge if you need to be able to switch implementations at runtime.

Pros:
* You can create platform-independent classes and apps.
* The client code works with high-level abstractions. It isn’t exposed to the platform details.
* Open/Closed Principle. You can introduce new abstractions and implementations independently from each other.
* Single Responsibility Principle. You can focus on high-level logic in the abstraction and on platform details in the implementation.

Cons:
* You might make the code more complicated by applying the pattern to a highly cohesive class.
